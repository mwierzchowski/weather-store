name: CI/CD
on:
  push:

jobs:
  Build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13.1-alpine
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: postgres
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Test
        env:
          ci_build: true
          spring_profiles_active: ci
        run: |
          ./gradlew check jacocoTestReport -x generateGitProperties --console=plain

      - name: Publish test report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Test report
          path: ${{ github.WORKSPACE }}/build/reports/tests/test

      - name: Export test coverage
        uses: paambaati/codeclimate-action@v3.0.0
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
          JACOCO_SOURCE_PATH: ${{ github.WORKSPACE }}/src/main/java
        with:
          coverageLocations: ${{ github.WORKSPACE }}/build/reports/jacoco/test/jacocoTestReport.xml:jacoco

  Release:
    if: github.ref == 'refs/heads/main'
    needs:
      - Build
    runs-on: ubuntu-latest
    env:
      IMAGE: ${{ secrets.REPO_LOGIN }}/${{ github.event.repository.name }}:v${{ github.RUN_NUMBER }}
      IMAGE_LATEST: ${{ secrets.REPO_LOGIN }}/${{ github.event.repository.name }}:latest
      API_SPEC: ${{ github.WORKSPACE }}/openapi.yaml
    services:
      postgres:
        image: postgres:13.1-alpine
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: postgres
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ github.REPOSITORY_OWNER }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Login to Container Registry
        uses: docker/login-action@v1
        with:
          registry: azurecr.io
          username: ${{ secrets.REPO_LOGIN }}
          password: ${{ secrets.REPO_PASSWORD }}

      - name: Build image
        run: |
          ./gradlew bootBuildImage --imageName ${{ env.IMAGE }} --console=plain

      - name: Run container
        run: |
          docker run --network host -d ${{ env.IMAGE }}

      - name: Health check
        run: |
          docker run --network host curlimages/curl:7.82.0 \
            http://localhost:8080/actuator/health \
            --retry-all-errors \
            --retry-delay 1 \
            --retry 20 \
            --connect-timeout 5

      - name: Publish image
        run: |
          docker tag ${{ env.IMAGE }} ${{ env.IMAGE_LATEST }}
          docker push ${{ env.IMAGE }}
          docker push ${{ env.IMAGE_LATEST }}

      - name: Download API spec
        run: |
          wget http://localhost:8080/v3/api-docs.yaml --output-document ${{ env.API_SPEC }}

      - name: Publish API spec
        uses: actions/upload-artifact@v3
        with:
          name: API spec
          path: ${{ env.API_SPEC }}

#      - name: Clean up images
#        uses: snok/container-retention-policy@v1
#        with:
#          image-names: ${{ github.event.repository.name }}
#          cut-off: 1 second ago UTC+1
#          account-type: personal
#          keep-at-least: 3
#          skip-tags: latest
#          token: ${{ secrets.PACKAGES_PAT }}
