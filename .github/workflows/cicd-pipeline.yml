name: CI/CD
on:
  push:
env:
  BUILD_VERSION: v${{ github.RUN_NUMBER }}
  BUILD_TAG: ghcr.io/${{ github.REPOSITORY }}:v${{ github.RUN_NUMBER }}
  DOCKER_BUILDKIT: 1

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13.1-alpine
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: postgres
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Test
        env:
          CI_BUILD: true
          spring_profiles_active: int
        run: |
          ./gradlew clean check jacocoTestReport --no-daemon --console=plain

      - name: Publish test report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Test report
          path: ${{ github.WORKSPACE }}/build/reports/tests/test

      - name: Export test coverage
        uses: paambaati/codeclimate-action@v3.0.0
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
          JACOCO_SOURCE_PATH: ${{ github.WORKSPACE }}/src/main/java
        with:
          coverageLocations: ${{ github.WORKSPACE }}/build/reports/jacoco/test/jacocoTestReport.xml:jacoco

  image-check:
    name: Image check
    runs-on: ubuntu-latest
    env:
      OPENAPI_SPEC: ${{ github.WORKSPACE }}/openapi.json
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ github.REPOSITORY_OWNER }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Run image
        run: |
          docker-compose -p ${{ github.event.repository.name }} \
            -f etc/docker-compose.srv.yml -f etc/docker-compose.app.yml up -d

      - name: Health check
        run: |
          docker run --network host curlimages/curl:7.82.0 \
            http://localhost:8080/actuator/health \
            --retry-all-errors \
            --retry-delay 1 \
            --retry 20 \
            --connect-timeout 5

      - name: Download API spec
        run: |
          wget http://localhost:8080/v3/api-docs --output-document ${{ env.OPENAPI_SPEC }}

      - name: Publish API spec
        uses: actions/upload-artifact@v3
        with:
          name: API spec
          path: ${{ env.OPENAPI_SPEC }}

  release:
    name: Release
    if: github.ref == 'refs/heads/main'
    needs:
      - test
      - image-check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ github.REPOSITORY_OWNER }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.REPOSITORY_OWNER }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and publish
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ env.BUILD_TAG }}
          cache-from: type=gha
          cache-to: type=gha

      - name: Remove old releases
        uses: snok/container-retention-policy@v1
        with:
          image-names: ${{ github.event.repository.name }}
          cut-off: 1 second ago UTC+1
          account-type: personal
          keep-at-least: 2
          skip-tags: latest
          token: ${{ secrets.PACKAGES_PAT }}